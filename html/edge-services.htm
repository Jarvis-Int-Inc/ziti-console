    <!-- General Page Layout HTML -->  
    <div class="header">
        <div class="title">Manage <span data-bind="pageTitle"></span></div>
        <div class="bread">Ziti Network <span class="secondary">/</span> Manage <span data-bind="pageTitle"></span></div>
        <div class="line"></div>
        <div class="tabs">
            <div class="tab" data-go="/identities">Manage Identities</div>
            <div class="tab selected">Manage Services</div>
            <div class="tab" data-go="/edge-routers">Manage Routers</div>
            <div class="tab" data-go="/terminators">Manage Terminators</div>
        </div>
    </div>
    <div class="action icon-plus" data-action="add"></div>
    <div class="filters">
        <div class="clear"></div>
        <input id="SearchFilter" data-defined="search" type="text" class="search" placeholder="Type to Filter" />
        <div class="clear" data-defined="clear"></div>        
        <div class="counters"><span id="Start">-</span>-<span id="End">-</span> of <span id="Total">-</span></div>
        <div class="navigate prev icon-prev disabled"></div>
        <div class="navigate next icon-next disabled"></div>
    </div>
    <div class="area data" data-defined="table">
        <div class="noitems"></div>
        <div class="table">
            <div class="head grid seven">
                <div class="col">
                    <div class="selector all"></div>
                </div>
                <div class="col sort asc" data-by="name">Name<div class="dragger"></div></div>
                <div class="col desktop" data-by="roleAttributes">Roles<div class="dragger"></div></div>
                <div class="col desktop" data-by="egressRouter">Router<div class="dragger"></div></div>
                <div class="col desktop" data-by="endpointAddress">Endpoint<div class="dragger"></div></div>
                <div class="col desktop sort" data-by="createdAt">Created</div>
                <div class="col"></div>
            </div>
            <div class="rows" data-defined="rows">
                <!-- This area will be replaced by data rows -->
            </div>
        </div>
    </div>
    <div class="nodata" data-defined="empty">No <span data-bind="pageTitle"></span> Defined, Click the plus to add A <span data-bind="singular"></span>.</div>

    <div id="RowTemplate" class="row grid seven template" data-defined="template">
        <div class="col">
            <div class="selector" data-id="{{id}}"></div>
        </div>
        <div class="col" data-id="{{id}}"><strong>{{name}}</strong></div>
        <div class="col desktop" data-id="{{id}}">{{selector.roleAttributes}}</div>
        <div class="col desktop" data-id="{{id}}">{{egressRouter}}</div>
        <div class="col desktop" data-id="{{id}}">{{endpointAddress}}</div>
        <div class="col desktop" data-id="{{id}}">{{moment.createdAt}}</div>
        <div class="col allowOver">
            <div class="dots" data-id="{{id}}">...
                <div class="gridMenu" data-id="{{id}}">
                    <div class="gridAction" data-id="{{id}}" data-action="edit">Edit</div>
                    <div class="gridAction" data-id="{{id}}" data-action="delete">Delete</div>
                </div>
            </div>
        </div>
    </div>

	<!-- Modification Modals -->
    <div id="AddModal" class="modal box full">
        <div class="sized">
            <div class="close icon-close"></div>
            <div class="title adding">Create <span data-bind="singular"></span></div>
            <div class="subtitle adding">Add a New <span data-bind="singular"></span> by completing the following form</div>
            <div class="title editing">Edit <span data-bind="singular"></span></div>
            <div class="subtitle editing">Change the <span data-bind="singular"></span> Details</div>
            <label for="Name">Name</label>
            <input id="Name" data-bind="data.name" type="text" maxlength="500" placeholder="Enter a name" data-restrict="empty" />
            <label for="Roles">Roles</label>
            <div id="Roles"></div>
            <label for="Routers">Router</label>
            <select id="Routers" data-bind="data.egressRouter"></select>
            <div class="darkened endpoint" style="display: none;">Endpoint Service</div>
            <div class="grid three endpoint" style="display: none;">
                <div>
                    <label for="Protocol">Protocol</label>
                    <select id="Protocol" data-default="tcp" type="text">
                        <option value="tcp">tcp</option>
                        <option value="tls">tls</option>
                        <option value="udp">udp</option>
                        <option value="quic">quic</option>
                    </select>
                </div>
                <div>
                    <label for="EndPoint">Host</label>
                    <input id="EndPointHost" type="text" maxlength="500" placeholder="google.com" />
                </div>
                <div>
                    <label for="EndPoint">Port</label>
                    <input id="EndPointPort" type="number" max="65535" min="1" data-restrict="port" />
                </div>
            </div>
            <div class="darkened">Configurations</div>
            <div id="ConfigList"></div>
            <div id="TagArea" data-tagarea="service"></div>
            <div id="TagExtended"></div>
            <div class="buttons">
                <div class="linkButton closer">Oops, No get me out of here</div>
                <div id="SaveButton" class="button" data-defined="save">Save</div>
            </div>
        </div>
	</div>
    
    
    <script language="javascript" type="text/javascript">
        page = {
            binding: {
                pageTitle: "Services",
                singular: "Service"
            },
            roles: null,
            filterObject: null,
            edgeRoutersObject: null,
            configsObject: null,
            configsTypesObject: null,
            isFirstLoaded: false,
            init: function() {
                this.isFirstLoaded = false;
                page.roles = new Selector("Roles","roles");
                page.edgeRoutersObject = new Data("edge-routers");
                page.configsObject = new Data("configs");
                page.configsTypesObject = new Data("config-types");
                page.filterObject = new Data("services");

                this.events();

                page.roles.isForceHash = false;
                page.roles.init();
                page.edgeRoutersObject.init(true);
                page.configsTypesObject.init(true);
                page.filterObject.init(true, true);
                
                routers.init();
            }, 
            events: function() {
                context.addListener(page.edgeRoutersObject.name, page.edgeRoutersLoaded);
                context.addListener(routers.name, page.fabricRoutersLoaded);
                context.addListener(page.configsObject.name, page.configsLoaded);
                context.addListener(page.configsTypesObject.name, page.configTypesLoaded);

                $("#IdentityFilter").keyup(page.filterIds);
                $("#Routers").change(page.routerChanged)
            },
            configTypesLoaded: function(e) {
                var types = context.get(page.configsTypesObject.name);
                var html = "";
                for (var i=0; i<types.length; i++) {
                    html += '<label id="Type_'+types[i].id+'_Label" style="display:none">'+types[i].name+'</label>';
                    html += '<select id="Type_'+types[i].id+'" style="display:none"></select>';
                }
                $("#ConfigList").html(html);
                page.configsObject.init(true, false, true);
            },
            configsLoaded: function(e) {
                var cons = context.get(page.configsObject.name);
                for (var i=0; i<cons.length; i++) {
                    if ($("#Type_"+cons[i].type+" option").length==0) $("#Type_"+cons[i].type).append('<option value="">Select Required Configurations</option>');
                    $("#Type_"+cons[i].type+"_Label").show();
                    $("#Type_"+cons[i].type).show();
                    $("#Type_"+cons[i].type).append('<option value="'+cons[i].id+'">'+cons[i].name+' - '+page.getPropString(cons[i].data)+'</option>');
                }
            },
            getPropString: function(obj) {
                var data = "";
                for (var key in obj) data += " "+obj[key];
                return data;
            },
            routerChanged: function() {
                var val = $("#Routers").val();
                if (val.trim().length==0) $(".endpoint").hide();
                else $(".endpoint").show();
            },
            fabricRoutersLoaded: function(e) {
                var select = document.getElementById("Routers");
                select.options = [];
                if (!page.isFirstLoaded) {
                    page.isFirstLoaded = true;
                    var option = document.createElement("option");
                    option.value = "";
                    option.text = "Hosted (No Router)";
                    select.add( option );
                }
                if (routers.data.length>0) {
                    for (var i=0; i<routers.data.length; i++) {
                        var option = document.createElement("option");
                        option.value = routers.data[i].id;
                        option.text = routers.data[i].id;
                        select.add( option );
                    }
                }
            },
            edgeRoutersLoaded: function(e) {
                var select = document.getElementById("Routers");
                select.options = [];
                if (!page.isFirstLoaded) {
                    page.isFirstLoaded = true;
                    var option = document.createElement("option");
                    option.value = "";
                    option.text = "Hosted (No Router)";
                    select.add( option );
                }
                if (page.edgeRoutersObject.data.length>0) {
                    for (var i=0; i<page.edgeRoutersObject.data.length; i++) {
                        var option = document.createElement("option");
                        option.value = page.edgeRoutersObject.data[i].id;
                        option.text = page.edgeRoutersObject.data[i].name;
                        select.add( option );
                    }
                }
            },
            gridAction: function(e) {
                var action = $(e.currentTarget).data("action");
                var id = $(e.currentTarget).data("id");
                if (action=="delete") page.filterObject.delete([id]);
                else if (action=="edit") page.edit(id);
            },
            edit: function(id) {
                var detail = page.filterObject.details(id);

                var router = "";
                if (detail.egressRouter&&detail.egressRouter!="unknown") router = detail.egressRouter;
                $("#Routers").val(router);
                page.roles.val(detail.roleAttributes);
                page.routerChanged();
                var protocol = "tcp";
                var host = "";
                var port = "";
            
                if (detail.endpointAddress) {
                    var endpoint = detail.endpointAddress.split(':');
                    if (endpoint.length>0) protocol = endpoint[0];
                    if (endpoint.length>1) host = endpoint[1].split('//').join('');
                    if (endpoint.length>2) port = endpoint[2];
                }

                $("#Protocol").val(protocol);
                $("#EndPointHost").val(host);
                $("#EndPointPort").val(port);
                if (detail.configs) {
                    for (var i=0; i<detail.configs.length; i++) {
                        $("#ConfigList select").each(function(index,e) {
                            if ($(e).children("option[value='"+detail.configs[i]+"']").length>0) {
                                $(e).val(detail.configs[i]);
                            }
                        });
                    }
                }
        
                modal.show("AddModal");
            },
            save: function() {
                if (page.validate()) {
                    var endpoint = '';
                    if ($("#Routers").val().trim().length!==0) endpoint = $("#Protocol").val()+":"+$("#EndPointHost").val()+":"+$("#EndPointPort").val();
        
                    var obj = {
                        name: $("#Name").val(),
                        egressRouter: $("#Routers").val(),
                        endpointAddress: endpoint,
                        configs: page.getConfigs(),
                        tags: tags.val(),
                        roleAttributes: page.roles.val()
                    };

                    page.filterObject.save(obj);
                } else growler.form();
            },
            getConfigs: function() {
                var configs = [];
                var types = context.get(page.configsTypesObject.name);
                var html = "";
                for (var i=0; i<types.length; i++) {
                    html += '<label id="Type_'+types[i].id+'_Label" style="display:none">'+types[i].name+'</label>';
                    html += '<select id="Type_'+types[i].id+'" style="display:none"></select>';
                    if ($("#Type_"+types[i].id+" option").length>0) {
                        var typeVal = $("#Type_"+types[i].id).val().trim();
                        if (typeVal.length>0) configs[configs.length] = typeVal;
                    }
                }
                return configs;
            },
            validate: function() {
                $(".errors").removeClass("errors");
                if ($("#Name").val().trim().length==0) $("#Name").addClass("errors");
                if ($("#Routers").val().trim().length!==0) {
                    if ($("#EndPointHost").val().trim().length==0) $("#EndPointHost").addClass("errors");
                    if ($("#EndPointPort").val().trim().length==0) $("#EndPointPort").addClass("errors");
                }
                return $(".errors").length==0;
            }
        }
    </script>