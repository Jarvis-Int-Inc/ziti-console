<div class="header">
    <div class="title">Manage <span data-bind="pageTitle"></span></div>
    <div class="bread">Ziti Network <span class="secondary">/</span> Manage <span data-bind="pageTitle"></span></div>
    <div class="line"></div>
    <div class="tabs">
        <div class="tab selected">Configurations</div>
        <div class="tab" data-go="/config-types">Config Types</div>
    </div>
</div>
<div class="action icon-plus" data-action="add"></div>
<div class="filters">
    <div class="clear"></div>
    <input id="SearchFilter" type="text" class="search" placeholder="Type to Filter" />
    <div class="counters"><span id="Start">-</span>-<span id="End">-</span> of <span id="Total">-</span></div>
    <div class="navigate prev icon-prev disabled"></div>
    <div class="navigate next icon-next disabled"></div>
</div>
<div class="area data">
    <div class="noitems"></div>
    <div class="table">
        <div class="head grid four">
            <div class="col">
                <div class="selector all"></div>
            </div>
            <div class="col sort asc" data-by="name">Name<div class="dragger"></div></div>
            <div class="col sort" data-by="createdAt">Created</div>
            <div class="col"></div>
        </div>
        <div class="rows">
            <!-- This area will be replaced by data rows -->
        </div>
    </div>
</div>
<div class="nodata">No <span data-bind="pageTitle"></span> Defined, Click the plus to add A <span data-bind="singular"></span>.</div>

<div id="RowTemplate" class="row grid four template">
    <div class="col">
        <div class="selector" data-id="{{id}}"></div>
    </div>
    <div class="col" data-id="{{id}}"><strong>{{name}}</strong></div>
    <div class="col" data-id="{{id}}">{{moment.createdAt}}</div>
    <div class="col allowOver">
        <div class="dots" data-id="{{id}}">...
            <div class="gridMenu" data-id="{{id}}">
                <div class="gridAction" data-id="{{id}}" data-action="edit">Edit</div>
                <div class="gridAction" data-id="{{id}}" data-action="delete">Delete</div>
            </div>
        </div>
    </div>
</div>

<!-- Modification Modals -->
<div id="AddModal" class="modal box full">
    <div class="sized">
        <div class="close icon-close"></div>
        <div class="title adding">Create <span data-bind="singular"></span></div>
        <div class="subtitle adding">Add a New <span data-bind="singular"></span> by completing the following form</div>
        <div class="title editing">Edit <span data-bind="singular"></span></div>
        <div class="subtitle editing">Change the <span data-bind="singular"></span> Details</div>
        <label for="Name">Name</label>
        <input id="Name" type="text" maxlength="500" placeholder="Enter a name" data-restrict="empty" />
        <label for="Types">Types</label>
        <select id="Types"></select>
        <div id="SchemaList"></div>
        <div id="TagArea"></div>
        <div class="buttons">
            <div class="linkButton closer">Oops, No get me out of here</div>
            <div id="SaveButton" class="button">Save</div>
        </div>
    </div>
</div>


<script language="javascript" type="text/javascript">
    page = {
        binding: {
            pageTitle: "Configuration",
            singular: "Configurations"
        },
        editId: "",
        data: [],
        tagData: [],
        deleting: [],
        removal: {},
        searchId: null,
        schema: null,
        editData: {},
        init: function() {
            this.events();
            context.addListener(tags.name, page.tagsLoaded);
            context.addListener(configTypes.name, page.typesLoaded);
            context.addListener(configs.name, page.getLoaded);
            configs.init();
            configTypes.all();
        }, 
        events: function() {
            $(".action").click(page.handleAction);
            $("#SaveButton").click(page.save);
            $("#SearchFilter").keyup(page.search);
            $("#Types").change(page.typechanged);
            $(".clear").click(page.clear);
        },
        getData: function() {
            var type = $("#Types").val();
            var detail = configTypes.details(type);
            var data = {};
            for (var key in detail.schema.properties) {
                var theValue = $("#schema_"+key).val();
                if (detail.schema.properties[key].type=="integer") data[key] = Number(theValue);
                else data[key] = theValue;
            }
            return data;
        },
        typechanged: function(e) {
            var type = $("#Types").val();
            var detail = configTypes.details(type);
            var html = '';
            $("#SchemaList").html(html);
            for (var key in detail.schema.properties) {
                var type = "text";
                var placeholder = "Enter a valid "+key;
                if (detail.schema.properties[key].type=="integer") {
                    type = "number";
                    if (detail.schema.properties[key].minimum&&detail.schema.properties[key].maximum) placeholder = "Number Between "+detail.schema.properties[key].minimum+"-"+detail.schema.properties[key].maximum;
                    else {
                        if (detail.schema.properties[key].minimum) placeholder = "Number great than "+detail.schema.properties[key].minimum;
                        if (detail.schema.properties[key].maximum) placeholder = "Number less than "+detail.schema.properties[key].maximum;
                    }
                }
                html += '<label for="schema_'+key+'">'+key+'</label>';
                if (detail.schema.properties[key].enum&&detail.schema.properties[key].enum.length>0) {
                    html += '<select id="schema_'+key+'" >';
                    for (var i=0; i<detail.schema.properties[key].enum.length; i++) {
                        html += '<option value="'+detail.schema.properties[key].enum[i]+'">'+detail.schema.properties[key].enum[i]+'</option>';
                    }
                    html += '</select>';
                } else if (detail.schema.properties[key].type=="boolean") {
                    html += '<div id="schema_'+key+'" class="toggle '+((page.editData[key])?'on':'')+'"><div class="switch"></div><div class="label"></div></div>';
                } else {
                    html += '<input id="schema_'+key+'" type="text" />';
                }
            }
            $("#SchemaList").html(html);
            for (var prop in page.editData) {
                $("#schema_"+prop).val(page.editData[prop]);
            }
		    $(".toggle").click(app.toggle);
        },
        typesLoaded: function(e) {
            var types = context.get(configTypes.name);
            var select = document.getElementById("Types");
            select.options = [];
            for (var i=0; i<types.length; i++) {
                var option = document.createElement("option");
                option.value = types[i].id;
                option.text = types[i].name;
                select.add( option );
            }
            page.typechanged();
        },
        clear: function() {
            $("#SearchFilter").val("");
            configs.filter = "";
            configs.get();
            $(".clear").removeClass("showing");
        },
        clickEdit: function(e) {
            var id = $(e.currentTarget).data("id");
            if (id) page.edit(id);
        },
        getLoaded: function(e) {
            $(".selector.selected").removeClass("selected");
            app.setAction();
            page.data = configs.data;
            $(".rows").html("");
            if (configs.data.length>0) {
                $("#Start").html(configs.start());
                $("#End").html(configs.end());
                $("#Total").html(configs.total());
                for (var i=0; i<configs.data.length; i++) {
                    var element = $("#RowTemplate").clone();
                        element.removeClass("template");
                        element.attr("id","Row"+i);
                        var obj = configs;
						for (var prop in obj.data[i]) {
                            element.html(element.html().split("{{"+prop+"}}").join(obj.data[i][prop]));
                            element.html(element.html().split("{{moment."+prop+"}}").join(moment(obj.data[i][prop]).utc().fromNow()));
                        }
                    $(".rows").append(element);
                }
                page.pageLoaded();     
                $(".data").show();
                $(".nodata").hide();       
            } else {
                $(".data").hide();
                $(".nodata").show();
            }       
        },
        toggleTag: function(e) {
            var tag = $(e.currentTarget);
            if (tag.hasClass("selected")) tag.removeClass("selected");
            else tag.addClass("selected");
        },
        pageLoaded: function() {
            $(".gridAction").click(page.gridAction);
            $(".navigate").off("click");
            $(".navigate").addClass("disabled");
            $(".clickEdit").click(page.clickEdit);
            if (!configs.isFirst()) {
                $(".navigate.prev").removeClass("disabled");
                $(".navigate.prev").on("click", configs.prev);
            }
            if (!configs.isLast()) {
                $(".navigate.next").removeClass("disabled");
                $(".navigate.next").on("click", configs.next);
            } 
            app.postLoad();
        },
        gridAction: function(e) {
            var action = $(e.currentTarget).data("action");
            var id = $(e.currentTarget).data("id");
            if (action=="delete") {
                page.deleting = [];
                page.deleting[page.deleting.length] = id;
                modal.confirm("you want to delete this "+page.binding.singular, page.confirmedDelete);
            } else if (action=="edit") {
                page.edit(id);
            }
        },
        edit: function(id) {
            page.reset();
            var detail = configs.details(id);
            tags.reset(page.tagData,detail);
            $(".adding").hide();
            $(".editing").show();

            $("#Name").val(detail.name);
            $("#Types").val(detail.type);
            page.editData = detail.data;
            page.typechanged();

            page.editId = id;
            modal.show("AddModal");
        },
        save: function() {
            if (page.validate()) {
                if (localStorage.getItem("filterAfterSave")=="on") {
                    $("#SearchFilter").val($("#Name").val());
                    configs.filter = $("#SearchFilter").val();
                }
                configs.save($("#Name").val(), $("#Types").val(), page.getData(), tags.getValues(page.tagData), page.editId);
            } else growler.form();
        },
        deleteMulti: function(e) {
            page.deleting = [];
            $(".selector.selected").each(function(index, e) {
                page.deleting[page.deleting.length] = $(e).data("id");
            });
            if (page.deleting.length>0) {
                modal.confirm("you want to delete these "+page.deleting.length+" "+((page.deleting.length>1)?page.binding.pageTitle:page.binding.singular), page.confirmedDelete);
            }
        },
        confirmedDelete: function() {
            configs.delete(page.deleting);
            app.reset();
        },
        validate: function() {
            $(".errors").removeClass("errors");
            if ($("#Name").val().trim().length==0) $("#Name").addClass("errors");
            if ($("#Types").val().trim().length==0) $("#Types").addClass("errors");
            var type = $("#Types").val();
            var detail = configTypes.details(type);
            var data = {};
            for (var key in detail.schema.properties) {
                var elem = $("#schema_"+key);
                var theValue = elem.val().trim();
                if (detail.schema.properties[key].type=="integer") {
                    if  (detail.schema.required.includes(key)) {
                        var min = null;
                        var max = null;
                        if (detail.schema.properties[key].minimum) min = Number(detail.schema.properties[key].minimum);
                        if (detail.schema.properties[key].maximum) max = Number(detail.schema.properties[key].maximum);
                        if (isNaN(parseInt(theValue))) elem.addClass("errors");
                        else {
                            var val = Number(theValue);
                            if (min!=null&val<min) elem.addClass("errors");
                            if (max!=null&val>max) elem.addClass("errors");
                        }
                    }
                } else {
                    if (detail.schema.required.includes(key)&&theValue.length==0) elem.addClass("errors");
                }
            }
            return $(".errors").length==0;
        },
        reset: function() {
            tags.reset(page.tagData);
            page.editId = "";
            page.removal = {};
            page.editData = {};
            page.typechanged();
            $(".errors").removeClass("errors");
            $(".tag.selected").removeClass("selected");
            $("#Name").val("");
            $("#Schema").val("");
        },
        handleAction: function(e) {
            page.reset();
            var action = $(e.currentTarget).data("action");
            if (action=="add") {
                page.add();
            } else if (action=="remove") {
                page.reset();
                page.deleteMulti();
            }
        },
        add: function() {
            $(".adding").show();
            $(".editing").hide();
            modal.show("AddModal");
        }
    }
</script>