    <!-- General Page Layout HTML -->  
    <div class="header">
        <div class="title">Manage <span data-bind="pageTitle"></span></div>
        <div class="bread">Ziti Network <span class="secondary">/</span> Manage <span data-bind="pageTitle"></span></div>
        <div class="line"></div>
        <div class="tabs">
            <div class="tab selected">Configurations</div>
            <div class="tab" data-go="/config-types">Config Types</div>
        </div>
    </div>
    <div class="action icon-plus" data-action="add"></div>
    <div class="filters">
        <div class="clear" data-defined="clear"></div>
        <input id="SearchFilter" data-defined="search" type="text" class="search" placeholder="Type to Filter" />
        <div class="counters"><span id="Start">-</span>-<span id="End">-</span> of <span id="Total">-</span></div>
        <div class="navigate prev icon-prev disabled"></div>
        <div class="navigate next icon-next disabled"></div>
    </div>
    <div class="area data" data-defined="table">
        <div class="noitems"></div>
        <div class="table">
            <div class="head grid fives">
                <div class="col">
                    <div class="selector all"></div>
                </div>
                <div class="col sort asc" data-by="name">Name<div class="dragger"></div></div>
                <div class="col">Type<div class="dragger"></div></div>
                <div class="col desktop sort" data-by="createdAt">Created</div>
                <div class="col"></div>
            </div>
            <div class="rows" data-defined="rows">
                <!-- This area will be replaced by data rows -->
            </div>
        </div>
    </div>
    <div class="nodata" data-defined="empty">No <span data-bind="pageTitle"></span> Defined, Click the plus to add A <span data-bind="singular"></span>.</div>



    <!-- Template HTML will be used to display rows of data -->
    <div id="RowTemplate" class="row grid fives template" data-defined="template">
        <div class="col">
            <div class="selector" data-id="{{id}}"></div>
        </div>
        <div class="col" data-id="{{id}}"><strong>{{name}}</strong></div>
        <div class="col" data-id="{{id}}">{{configType.name}}</div>
        <div class="col desktop" data-id="{{id}}">{{moment.createdAt}}</div>
        <div class="col allowOver">
            <div class="dots" data-id="{{id}}">...
                <div class="gridMenu" data-id="{{id}}">
                    <div class="gridAction" data-id="{{id}}" data-action="edit">Edit</div>
                    <div class="gridAction" data-id="{{id}}" data-action="delete">Delete</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modification Modals -->
    <div id="AddModal" class="modal box full">
        <div class="sized">
            <div class="close icon-close"></div>
            <div class="title adding">
                Create <span data-bind="singular"></span>
            </div>
            <div class="subtitle adding">Add a New <span data-bind="singular"></span> by completing the following form</div>
            <div class="title editing">Edit <span data-bind="singular"></span></div>
            <div class="subtitle editing">Change the <span data-bind="singular"></span> Details</div>
            <label for="Name">Name</label>
            <input id="Name" data-bind="data.name" type="text" maxlength="500" placeholder="Enter a name" data-restrict="empty" />
            <label for="Types">Types</label>
            <select id="Types" data-bind="data.configTypeId" data-default=""></select>
            <div id="SchemaList"></div>
            <label for="JSONView" class="jsonV">JSON</label> 
            <textarea id="JSONView" style="height: 75px;"></textarea>
            <div id="TagArea"></div>
            <div class="buttons">
                <div class="linkButton closer">Oops, No get me out of here</div>
                <div id="SaveButton" class="button" data-defined="save">Save</div>
            </div>
        </div>
    </div>


    <script language="javascript" type="text/javascript">
        page = {
            binding: {
                pageTitle: "Configuration",
                singular: "Configurations"
            },
            filterObject: null,
            configTypes: null,
            schema: null,
            editData: {},
            json: null,
            init: function() {
                this.events();

                page.filterObject = new Data("configs");
                page.filterObject.init(true, true);
                page.configTypes = new Data("config-types");
                page.configTypes.init(true, false, true);

                page.json = CodeMirror.fromTextArea(document.getElementById("JSONView"), { mode: "application/json", lineNumbers: true, extraKeys: {"Ctrl-Space": "autocomplete"} });
                page.json.setSize(null, 120);
                page.json.on('keyup', function () {
                    page.editData = JSON.parse(page.json.getValue());
                    page.loadChanges();
                });                
            }, 
            events: function() {
                context.addListener("config-types", page.typesLoaded);
                $("#Types").change(page.typechanged);
                $(".onoff").click(function(e) {
                    var obj = $(e.currentTarget);
                    if (obj.hasClass("on")) obj.removeClass("on");
                    else obj.addClass("on");
                    if (obj.hasClass("on")) {
                        $("#JSONView").show();
                        $("#JSONView").hide();
                    } else {
                        $("#JSONView").show();
                        $("#JSONView").hide();
                    }
                });
            },
            getVisualData: function() {
                var type = $("#Types").val();
                var detail = page.configTypes.details(type);
                var data = {};
                for (var key in detail.schema.properties) {
                    var theValue = $("#schema_"+key).val();
                    if (detail.schema.properties[key].type=="integer") data[key] = theValue;
                    else data[key] = theValue;
                }
                return data;
            },
            getData: function() {
                var type = $("#Types").val();
                var detail = page.configTypes.details(type);
                var data = {};
                for (var key in detail.schema.properties) {
                    var theValue = $("#schema_"+key).val();
                    if (detail.schema.properties[key].type=="integer") data[key] = Number(theValue);
                    else data[key] = theValue;
                }
                return data;
            },
            row: function(template, data) {
                template = template.split("{{configType.name}}").join(data.configType.name);
                return template;
            },
            loadChanges: function() {
                for (var prop in page.editData) {
                    $("#schema_"+prop).val(page.editData[prop]);
                }
            },
            typechanged: function(e) {
                var type = $("#Types").val();
                var detail = page.configTypes.details(type);
                var html = '';
                $("#SchemaList").html(html);
                if (detail) {
                    for (var key in detail.schema.properties) {
                        var type = "text";
                        var placeholder = "Enter a valid "+key;
                        if (detail.schema.properties[key].type=="integer") {
                            type = "number";
                            if (detail.schema.properties[key].minimum&&detail.schema.properties[key].maximum) placeholder = "Number Between "+detail.schema.properties[key].minimum+"-"+detail.schema.properties[key].maximum;
                            else {
                                if (detail.schema.properties[key].minimum) placeholder = "Number great than "+detail.schema.properties[key].minimum;
                                if (detail.schema.properties[key].maximum) placeholder = "Number less than "+detail.schema.properties[key].maximum;
                            }
                        }
                        html += '<label for="schema_'+key+'">'+key+'</label>';
                        if (detail.schema.properties[key].enum&&detail.schema.properties[key].enum.length>0) {
                            html += '<select id="schema_'+key+'" class="jsonSelect">';
                            for (var i=0; i<detail.schema.properties[key].enum.length; i++) {
                                html += '<option value="'+detail.schema.properties[key].enum[i]+'">'+detail.schema.properties[key].enum[i]+'</option>';
                            }
                            html += '</select>';
                        } else if (detail.schema.properties[key].type=="array") {
                            html += '<select id="schema_'+key+'" class="jsonSelect">';
                            for (var i=0; i<detail.schema.properties[key].items.enum.length; i++) {
                                html += '<option value="'+detail.schema.properties[key].items.enum[i]+'">'+detail.schema.properties[key].items.enum[i]+'</option>';
                            }
                            html += '</select>';
                        } else if (detail.schema.properties[key].type=="boolean") {
                            html += '<div id="schema_'+key+'" class="toggle '+((page.editData[key])?'on':'')+'"><div class="switch"></div><div class="label"></div></div>';
                        } else {
                            html += '<input id="schema_'+key+'" type="text" class="jsonEntry" />';
                        }
                    }
                    $("#SchemaList").html(html);
                    for (var prop in page.editData) {
                        $("#schema_"+prop).val(page.editData[prop]);
                    }
                    $(".jsonEntry").keyup(function(e) {
                        var data = page.getVisualData();
                        page.json.setValue(JSON.stringify(data));
                        page.json.autoFormatRange({line:0, ch:0}, {line:page.json.lineCount()});
                    });
                    $(".jsonSelect").change(function(e) {
                        var data = page.getVisualData();
                        page.json.setValue(JSON.stringify(data));
                        page.json.autoFormatRange({line:0, ch:0}, {line:page.json.lineCount()});
                    });
                    setTimeout(function() {
                        var data = page.getVisualData();
                        page.json.setValue(JSON.stringify(data));
                        page.json.autoFormatRange({line:0, ch:0}, {line:page.json.lineCount()});
                    }, 500);
                    $(".toggle").click(app.toggle);
                    $(".jsonV").show();
                    $(".CodeMirror").show();
                } else {
                    $(".jsonV").hide();
                    $(".CodeMirror").hide();
                }
            },
            typesLoaded: function(e) {
                var types = context.get(page.configTypes.name);
                var select = document.getElementById("Types");
                select.options = [];
                var option = document.createElement("option");
                option.value = "";
                option.text = "Select A Type...";
                select.add( option );
                for (var i=0; i<types.length; i++) {
                    var option = document.createElement("option");
                    option.value = types[i].id;
                    option.text = types[i].name;
                    select.add( option );
                }
                page.typechanged();
            },
            gridAction: function(e) {
                    var action = $(e.currentTarget).data("action");
                    var id = $(e.currentTarget).data("id");
                    if (action=="delete") page.filterObject.delete([id]);
                    else if (action=="edit") page.edit(id);
            },
            edit: function(id) {
                var detail = page.filterObject.details(id);
                page.editData = detail.data;
                page.json.setValue(JSON.stringify(detail.data));
                page.json.autoFormatRange({line:0, ch:0}, {line:page.json.lineCount()});
                page.json.setSize(null, 120);
                $("#Types").attr("disabled",true);
                page.typechanged();
                modal.show("AddModal");
            },
            save: function() {
                if (page.validate()) {
                    var obj = {
                        name: $("#Name").val(),
                        data: page.getData(),
                        tags: tags.val()
                    };
                    if (page.filterObject.editId=="") obj.configTypeId = $("#Types").val();
                    page.filterObject.save(obj);
                } else growler.form();
            },
            validate: function() {
                $(".errors").removeClass("errors");
                if ($("#Name").val().trim().length==0) $("#Name").addClass("errors");
                if ($("#Types").val().trim().length==0) $("#Types").addClass("errors");
                var type = $("#Types").val();
                var detail = page.configTypes.details(type);
                var data = {};
                if (detail) {
                    for (var key in detail.schema.properties) {
                        var elem = $("#schema_"+key);
                        var theValue = elem.val().trim();
                        if (detail.schema.properties[key].type=="integer") {
                            if  (detail.schema.required.includes(key)) {
                                var min = null;
                                var max = null;
                                if (detail.schema.properties[key].minimum) min = Number(detail.schema.properties[key].minimum);
                                if (detail.schema.properties[key].maximum) max = Number(detail.schema.properties[key].maximum);
                                if (isNaN(parseInt(theValue))) elem.addClass("errors");
                                else {
                                    var val = Number(theValue);
                                    if (min!=null&val<min) elem.addClass("errors");
                                    if (max!=null&val>max) elem.addClass("errors");
                                }
                            }
                        } else {
                            if (detail.schema.required.includes(key)&&theValue.length==0) elem.addClass("errors");
                        }
                    }
                }
                return $(".errors").length==0;
            },
            reset: function() {
                $("#Types").attr("disabled",false);
                page.editData = {};
                page.typechanged();
            }
        }
    </script>