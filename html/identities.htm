    <!-- General Page Layout HTML -->
    <div class="header">
        <div class="title">Manage <span data-bind="pageTitle"></span></div>
        <div class="bread">Ziti Network <span class="secondary">/</span> Manage <span data-bind="pageTitle"></span></div>
        <div class="line"></div>
        <div class="tabs">
            <div class="tab" data-go="/identities">Identities</div>
            <div class="tab" data-go="/edge-services">Services</div>
            <div class="tab" data-go="/edge-routers">Edge Routers</div>
            <div class="tab" data-go="/transit-routers">Transit Routers</div>
            <div class="tab" data-go="/terminators">Terminators</div>
        </div>
    </div>
    <div class="action icon-plus" data-action="add"></div>
    <div class="filters">
        <input id="SearchFilter" data-defined="search" type="text" class="search" placeholder="Type to Filter" />
        <div class="clear" data-defined="clear"></div>
        <div class="counters"><span id="Start">-</span>-<span id="End">-</span> of <span id="Total">-</span></div>
        <div class="navigate prev icon-prev disabled"></div>
        <div class="navigate next icon-next disabled"></div>
    </div>
    <div class="area data" data-defined="table">
        <div class="table">
            <div class="head grid seven">
                <div class="col">
                    <div class="selector all"></div>
                </div>
                <div class="col sort asc" data-by="name">Name<div class="dragger"></div></div>
                <div class="col sort desktop" data-by="typeId">Type<div class="dragger"></div></div>
                <div class="col sort desktop" data-by="isAdmin">Admin<div class="dragger"></div></div>
                <div class="col sort desktop" data-by="createdAt">Created<div class="dragger"></div></div>
                <div class="col desktop">Token</div>
                <div class="col"></div>
            </div>
            <div class="rows" data-defined="rows">
                <!-- This area will be replaced by data rows -->
            </div>
        </div>
    </div>
    <div class="nodata" data-defined="empty">No <span data-bind="pageTitle"></span> Defined, Click the plus to add A <span data-bind="singular"></span>.</div>

    <!-- Data Table Template -->
    <div id="RowTemplate" class="row grid seven template" data-defined="template">
        <div class="col">
            <div class="selector" data-id="{{id}}"></div>
        </div>
        <div class="col" data-id="{{id}}"><strong>{{name}}</strong></div>
        <div class="col desktop" data-id="{{id}}">{{type}}</div>
        <div class="col desktop" data-id="{{id}}">{{isAdmin}}</div>
        <div class="col desktop" data-id="{{id}}">{{moment.createdAt}}</div>
        <div class="col desktop notitle">{{tokenLink}}</div>
        <div class="col allowOver">
            <div class="dots" data-id="{{id}}">...
                <div class="gridMenu" data-id="{{id}}">
                    <div class="gridAction" data-id="{{id}}" data-action="edit">Edit</div>
                    <div class="gridAction {{hiddenClass}}" data-id="{{id}}" data-action="download">Download JWT</div>
                    <div class="gridAction {{hiddenClass}}" data-id="{{id}}" data-action="qr">View QR</div>
                    <div class="gridAction" data-id="{{id}}" data-action="override">Overrides</div>
                    <div class="gridAction" data-id="{{id}}" data-action="delete">Delete</div>
                </div>
            </div>
        </div>
    </div>

    <div id="OverrideTemplate" class="row grid threedelete template">
        <div>{{serviceName}}</div>
        <div>{{configName}}</div>
        <div class="relative">
            <div class="remove icon-minus removeAssoc" data-config="{{config}}" data-service="{{service}}"></div>
        </div>
    </div>

    <div id="OverrideModal" class="modal box full">
        <div class="sized">
            <div class="close icon-close"></div>
            <div class="title">Identity Overrides</div>
            <div class="subtitle">Manage the Service Config Identity Overrides</div>
            <div class="darkened overrides" style="display: none;">Current Overrides</div>
            <div id="OverrideList" class="grid splitRemove overrides" style="display: none;">

            </div>
            <div class="darkened">Add Override Config</div>
            <div class="grid split">
                <div>
                    <label for="ServiceList">Service</label>
                    <select id="ServiceList"></select>
                </div>
                <div>
                    <label for="ConfigList">Configuration</label>
                    <select id="ConfigList"></select>
                </div>
            </div>
            <div class="buttons">
                <div id="AssociateButton" class="button">Add</div>
            </div>
        </div>
    </div>



	<!-- Modification Modals -->
	<div id="AddModal" class="modal box full">
        <div class="sized">
            <div class="close icon-close"></div>
            <div class="title adding">Create <span data-bind="singular"></span></div>
            <div class="subtitle adding">Add a New <span data-bind="singular"></span></div>
            <div class="title editing">Edit <span data-bind="singular"></span></div>
            <div class="subtitle editing">Change the <span data-bind="singular"></span> Details</div>
            <label for="Name">Name</label>
            <input id="Name" data-bind="data.name" type="text" maxlength="500" placeholder="Enter a name" data-enter="SaveButton" />
            <label for="Roles">Roles</label>
            <div id="Roles"></div>
            <label for="Services" class="editing">Services</label>
            <div id="Services" class="row editing"></div>
            <div class="split unsplit">
                <div>
                    <label for="IdentityType">Identity Type</label>
                    <select id="IdentityType" data-default="Device" data-enter="SaveButton">
                        <option value="Device" selected>Device</option>
                        <option value="Service">Service</option>
                        <option value="User">User</option>
                    </select>
                </div>
                <div id="UserArea" style="display:none;">
                    <label>Is this User an Admin?</label>
                    <div id="IsAdmin" class="toggle">
                        <div class="switch"></div>
                        <div class="label"></div>
                    </div>
                </div>
            </div>
            <div class="split unsplit">
                <div>
                    <label for="Enrollment">Enrollment Type</label>
                    <select id="EnrollmentType" data-bind="data.enrollmentType" data-default="ott" data-enter="SaveButton" disabled>
                        <option value="ott" selected>One Time Token</option>
                        <option value="CA">Certificate Authority</option>
                    </select>
                </div>
                <div id="CertAuthoritiesArea" style="display:none">
                    <label for="Authorities">Certificate Authority</label>
                    <select id="Authorities" data-enter="SaveButton"></select>
                </div>
            </div>
            <div id="TagArea" data-tagarea="identity"></div>
            <div id="TagExtended"></div>
            <div class="buttons">
                <div class="linkButton closer">Oops, No get me out of here</div>
                <div id="SaveButton" class="button" data-defined="save">Save</div>
            </div>
        </div>
    </div>
    
	<div id="QRModal" class="modal box full">
        <div class="sized center">
            <div class="close icon-close"></div>
            <div class="title">Scan QR Code</div>
            <div class="subtitle">Use your tunneler app to scan this code</div>
            <div id="QRCode"></div>
        </div>
    </div>

    
    
    <script language="javascript" type="text/javascript">
        page = {
            binding: {
                pageTitle: "Identities",
                singular: "Identity"
            },
            filterObject: null,
            casObject: null,
            configs: null,
            servicesObject: null,
            idServices: null,
            roles: null,
            init: function() {
                page.roles = new Selector("Roles","roles");
                page.casObject = new Data("cas");
                page.servicesObject = new Data("services");
                page.configsObject = new Data("configs");
                page.filterObject = new Data("identities");
                page.idServices = new Data("services","idservices");

                page.events();

                page.roles.isForceHash = false;
                page.roles.init();
                page.casObject.init(true);
                page.servicesObject.init(true);
                page.configsObject.init(true);
                page.filterObject.init(true, true);
                page.idServices.init();
                page.idServices.closeModals = false;
            }, 
            events: function() {
                context.addListener(page.filterObject.name, page.loaded);
                context.addListener(page.casObject.name, page.casLoaded);
                context.addListener(page.servicesObject.name, page.servicesLoaded);
                context.addListener(page.configsObject.name, page.configsLoaded);
                context.addListener("idservices", page.idServicesLoaded);
                $("#IdentityType").change(page.toggleUserType);
                $("#EnrollmentType").change(page.toggleType);
                $("#AssociateButton").click(page.addOveride);
            },
            row: function(template, data) {
                template = template.split("{{type}}").join(data.type.name);
                var enrollment = "N/A";
                if (data.enrollment&&data.enrollment.ott&&data.enrollment.ott.jwt) {
                    if (data.enrollment.ott.expiresAt!=null) {
                        var difference = moment(data.enrollment.ott.expiresAt).diff(moment(new Date()));
                        if (difference>0) enrollment = '<span class="cert" data-id="'+data.id+'"></span><span class="qr icon-qr" data-id="'+data.id+'"></span>';
                    } else {
                        enrollment = '<span class="cert" data-id="'+data.id+'"></span><span class="qr icon-qr" data-id="'+data.id+'"></span>';
                    }
                }
                if (enrollment=="N/A") template = template.split("{{hiddenClass}}").join("hidden");
                else template = template.split("{{hiddenClass}}").join("");
                template = template.split("{{tokenLink}}").join(enrollment);
                return template;
            },
            gridAction: function(e) {
                var action = $(e.currentTarget).data("action");
                var id = $(e.currentTarget).data("id");
                if (action=="delete") page.filterObject.delete([id]);
                else if (action=="edit") page.edit(id);
                else if (action=="download") page.getCert(e);
                else if (action=="qr") page.genQR(e);
                else if (action=="override") page.getOverrides(id);
            },
            edit: function(id) {
                var detail = page.filterObject.details(id);
                console.log(detail);
                page.roles.val(detail.roleAttributes);
                $("#IdentityType").val(detail.type.name);
                $("#IsAdmin").removeClass("on");
                $("#EnrollmentType").val("ott");
                $("#EnrollmentType").attr("disabled", true);
                $("#Authorities").attr("disabled", true);
                $("#CertAuthoritiesArea").parent().addClass("unsplit");
                if (detail.enrollment&&detail.enrollment.ca) {
                    $("#EnrollmentType").val("CA");
                    if (detail.enrollment&&detail.enrollment.ca.caId) {
                        $("#Authorities").val(detail.enrollment.ca.caId);
                        $("#CertAuthoritiesArea").show();
                        $("#CertAuthoritiesArea").parent().removeClass("unsplit");
                    }
                }
                if (detail.isAdmin) $("#IsAdmin").addClass("on");
                var area = "#UserArea";
                if (detail.type.name=="User") {
                    $(area).parent().removeClass("unsplit");
                    $(area).show();
                } else {
                    $(area).parent().addClass("unsplit");
                    $(area).hide();
                }                 
                $("#Services").html("Loading...");
                page.idServices.params["asIdentity"] = id;
                page.idServices.get();
                modal.show("AddModal");
            },
            idServicesLoaded: function(e) {
                var services = e.data;
                var html = "No Services Assigned";
                if (services&&services.length>0) {
                    html = "";
                    for (var i=0; i<services.length; i++) {
                        html += '<div class="hashtag">'+services[i].name+'</div>';
                    }
                }
                $("#Services").html(html);
            },
            save: function() {
                if (page.validate()) {
                    var obj = {
                        name: $("#Name").val(),
                        type: $("#IdentityType").val(),
                        isAdmin: $("#IsAdmin").hasClass("on"),
                        roleAttributes: page.roles.val(),
                        tags: tags.val()
                    };
                    if (!page.filterObject.isEditing()) {
                        obj.enrollment = {};
                        if ($("#EnrollmentType").val()=="ott") obj.enrollment.ott = true;
                        else obj.enrollment.ca = $("#Authorities").val();
                    }
                    if (obj.type=="User") obj.isAdmin = $("#IsAdmin").hasClass("on");
                    page.filterObject.save(obj);
                } else growler.form();
            }, 
            loaded: function() {
                $(".cert").click(page.getCert);
                $(".qr").click(page.genQR);
            },
            genQR: function(e) {
                var id = $(e.currentTarget).data("id");
                var identity = page.filterObject.details(id);
                if (identity&&identity.enrollment&&identity.enrollment.ott&&identity.enrollment.ott.jwt) {
                    $("#QRCode").html("");
                    var qrcode = new QRCode("QRCode", {
                        text: encodeURIComponent(identity.enrollment.ott.jwt),
                        width: 300,
                        height: 300,
                        colorDark : "#000000",
                        colorLight : "#ffffff",
                        correctLevel : QRCode.CorrectLevel.M
                    });
                    modal.show("QRModal");
                }
            },
            getCert: function(e) {
                var id = $(e.currentTarget).data("id");
                var identity = page.filterObject.details(id);
                if (identity&&identity.enrollment&&identity.enrollment.ott&&identity.enrollment.ott.jwt) {
                    var name = identity.name.split(" ").join("");
                    var element = document.createElement('a');
                    element.setAttribute('href', 'data:application/ziti-jwt;charset=utf-8,' + encodeURIComponent(identity.enrollment.ott.jwt));
                    element.setAttribute('download', name+".jwt");
                    element.style.display = 'none';
                    document.body.appendChild(element);
                    element.click();
                    document.body.removeChild(element);
                }
            },
            getPropString: function(obj) {
                var data = "";
                for (var key in obj) data += " "+obj[key];
                return data;
            },
            configsLoaded: function(e) {
                var cons = context.get(page.configsObject.name);
                $("#ConfigList").html("");
                for (var i=0; i<cons.length; i++) {
                    $("#ConfigList").append('<option value="'+cons[i].id+'">'+cons[i].name+' - '+page.getPropString(cons[i].data)+'</option>');
                }
            },
            getConfigName: function(id) {
                for (var i=0; i<page.configsObject.data.length; i++) {
                    if (page.configsObject.data[i].id==id) return page.configsObject.data[i].name;
                }
                return "";
            },
            servicesLoaded: function(e) {
                var items = context.get(page.servicesObject.name);
                $("#ServiceList").html("");
                for (var i=0; i<items.length; i++) {
                    $("#ServiceList").append('<option value="'+items[i].id+'">'+items[i].name+'</option>');
                }
            },
            getServiceName: function(id) {
                for (var i=0; i<page.servicesObject.data.length; i++) {
                    if (page.servicesObject.data[i].id==id) return page.servicesObject.data[i].name;
                }
                return "";
            },
            casLoaded: function(e) {
                var select = document.getElementById("Authorities");
                select.options = [];
                if (page.casObject.data.length>0) {
                    $("#EnrollmentType").attr("disabled", false);
                    for (var i=0; i<page.casObject.data.length; i++) {
                        if (i==0) $("#Authorities").data("default",page.casObject.data[i].id);
                        var option = document.createElement("option");
                        option.value = page.casObject.data[i].id;
                        option.text = page.casObject.data[i].name;
                        select.add( option );
                    }
                } else $("#EnrollmentType").attr("disabled", true);
            },
            toggleType: function(e) {
                var area = "#CertAuthoritiesArea";
                var type = $("#EnrollmentType").val();
                if (type=="CA") {
                    $(area).parent().removeClass("unsplit");
                    $(area).show();
                } else {
                    $(area).parent().addClass("unsplit");
                    $(area).hide();
                } 
            },
            toggleUserType: function(e) {
                var area = "#UserArea";
                var type = $("#IdentityType").val();
                if (type=="User") {
                    $(area).parent().removeClass("unsplit");
                    $(area).show();
                } else {
                    $(area).parent().addClass("unsplit");
                    $(area).hide();
                } 
            },
            reset: function() {
                if (page.casObject.data.length>0) $("#EnrollmentType").removeAttr("disabled");
                else $("#EnrollmentType").attr("disabled", "true");
                page.toggleType();
            },
            validate: function() {
                $(".errors").removeClass("errors");
                if ($("#Name").val().trim().length==0) $("#Name").addClass("errors");
                return $(".errors").length==0;
            },
            addOveride: function(e) {
                service.call("subSave" , { 
                    type: "service-configs", 
                    parentType: page.filterObject.name, 
                    id: page.filterObject.editId, 
                    doing: "POST", 
                    save: [{ 
                        service: $("#ServiceList").val(), 
                        config: $("#ConfigList").val() }] 
                    }, 
                    page.overridesLoaded
                );
            },
            getOverrides: function(id) {
                var detail = page.filterObject.details(id);
                service.call("data" , { type: page.filterObject.name+"/"+page.filterObject.editId+"/service-configs" }, page.overridesLoaded);
                modal.show("OverrideModal");
            },
            overridesLoaded: function(e) {
                if (e.error) growler.error("Error assigning config override ", e.error);
                else {
                    var overrides = e.data;
                    $("#OverrideList").html("");
                    if (overrides.length>0) {
                        for (var i=0; i<overrides.length; i++) {
                            var element = $("#OverrideTemplate").clone();
                            element.removeClass("template");
                            element.html(element.html().split("{{service}}").join(overrides[i].service));
                            element.html(element.html().split("{{config}}").join(overrides[i].config));
                            element.html(element.html().split("{{serviceName}}").join(page.getServiceName(overrides[i].service)));
                            element.html(element.html().split("{{configName}}").join(page.getConfigName(overrides[i].config)));
                            $("#OverrideList").append(element);
                        }
                        $(".overrides").show();
                        $(".removeAssoc").click(page.removeOveride);
                    } else {
                        $(".overrides").hide();
                    }
                }
            },
            removeOveride: function(e) {
                service.call("subSave" , { 
                    type: "service-configs", 
                    parentType: page.filterObject.name, 
                    id: page.filterObject.editId, 
                    doing: "DELETE", 
                    save: [{ 
                        service: $(e.currentTarget).data("service"), 
                        config: $(e.currentTarget).data("config") 
                    }] 
                }, page.overridesLoaded);
            }
        }
    </script>