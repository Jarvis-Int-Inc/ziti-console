    <div class="header">
        <div class="title">Manage <span data-bind="pageTitle"></span></div>
        <div class="bread">Ziti Network <span class="secondary">/</span> Manage <span data-bind="pageTitle"></span></div>
        <div class="line"></div>
        <div class="tabs">
            <div class="tab selected">Edge Router Policies</div>
            <div class="tab" data-go="/service-policies">Service Policies</div>
        </div>
    </div>
    <div class="action icon-plus" data-action="add"></div>
    <div class="filters">
        <input id="SearchFilter" type="text" class="search" placeholder="Type to Filter" />
        <div class="clear"></div>
        <div class="counters"><span id="Start">-</span>-<span id="End">-</span> of <span id="Total">-</span></div>
        <div class="navigate prev icon-prev disabled"></div>
        <div class="navigate next icon-next disabled"></div>
    </div>
    <div class="area data">
        <div class="noitems"></div>
        <div class="table">
            <div class="head grid three">
                <div class="col">
                    <div class="selector all"></div>
                </div>
                <div class="col sort asc" data-by="name">Name<div class="dragger"></div></div>
                <div class="col"></div>
            </div>
            <div class="rows">
                <!-- This area will be replaced by data rows -->
            </div>
        </div>
    </div>
    <div class="nodata">No <span data-bind="pageTitle"></span> Defined, Click the plus to add A <span data-bind="singular"></span>.</div>

    <div id="RowTemplate" class="row grid three template">
        <div class="col">
            <div class="selector" data-id="{{id}}"></div>
        </div>
        <div class="col" data-id="{{id}}"><strong>{{name}}</strong></div>
        <div class="col allowOver">
            <div class="dots" data-id="{{id}}">...
                <div class="gridMenu" data-id="{{id}}">
                    <div class="gridAction" data-id="{{id}}" data-action="edit">Edit</div>
                    <div class="gridAction" data-id="{{id}}" data-action="delete">Delete</div>
                </div>
            </div>
        </div>
    </div>

	<!-- Modification Modals -->
    <div id="AddModal" class="modal box full">
        <div class="sized">
            <div class="close icon-close"></div>
            <div class="title adding">Create <span data-bind="singular"></span></div>
            <div class="subtitle adding">Add a New <span data-bind="singular"></span> by completing the following form</div>
            <div class="title editing">Edit <span data-bind="singular"></span></div>
            <div class="subtitle editing">Change the <span data-bind="singular"></span> Details</div>
            <label for="Name">Name</label>
            <input id="Name" type="text" maxlength="500" placeholder="Enter a name" />
            <label for="Roles">Router Roles</label>
            <input id="Roles" type="text" maxlength="500" placeholder="Enter a list of roles" />
            <label for="IDRoles">Identity Roles</label>
            <input id="IDRoles" type="text" maxlength="500" placeholder="Enter a list of roles" />
            <div id="TagArea"></div>
            <div id="TagExtended"></div>
            <div class="buttons">
                <div class="linkButton closer">Oops, No get me out of here</div>
                <div id="SaveButton" class="button">Save</div>
            </div>
        </div>
	</div>
    
    
    <script language="javascript" type="text/javascript">
        page = {
            binding: {
                pageTitle: "Router Policies",
                singular: "Router Policy"
            },
            tagData: [],
            data: [],
            deleting: [],
            removal: {},
            searchId: null,
            init: function() {
                this.events();
                context.addListener(tags.name, page.tagsLoaded);
                context.addListener(routerPolicy.name, page.getLoaded);
                routerPolicy.init();
            }, 
            events: function() {
                $(".action").click(page.handleAction);
                $("#SaveButton").click(page.save);
                $("#SearchFilter").keyup(page.search);
                $("#Filter").keyup(page.filter);
		        $(".clear").click(page.clear);
            },
            tagsLoaded: function() {
                var html = "";
                for (var i=0; i<tags.data.length; i++) {
                    if (tags.data[i].objects=="all"||tags.data[i].objects.indexOf('policies')>=0) {
                        page.tagData[page.tagData.length] = tags.data[i];
                        html += tags.html(tags.data[i]);
                    }
                }
                $("#TagArea").html(html);
                tags.events();
            },
            clear: function() {
                $("#SearchFilter").val("");
                routerPolicy.filter = "";
                routerPolicy.get();
                $(".clear").removeClass("showing");
            },
            search: function(e) {
                if (page.searchId) clearTimeout(page.searchId);
                routerPolicy.filter = $("#SearchFilter").val();
                if ($("#SearchFilter").val().trim().length>0) $(".clear").addClass("showing");
                else $(".clear").removeClass("showing");
                if (e.keyCode==13) {
                    routerPolicy.get();
                } else {
                    page.searchId = setTimeout(function() {
                        routerPolicy.get();
                    }, 1000);
                }
            },
            clickEdit: function(e) {
                var id = $(e.currentTarget).data("id");
                if (id) page.edit(id);
            },
            getLoaded: function(e) {
                $(".selector.selected").removeClass("selected");
                app.setAction();
                page.data = routerPolicy.data;
                $(".rows").html("");
                if (routerPolicy.data.length>0) {
                    $("#Start").html(routerPolicy.start());
                    $("#End").html(routerPolicy.end());
                    $("#Total").html(routerPolicy.total());
                    for (var i=0; i<routerPolicy.data.length; i++) {
                        var element = $("#RowTemplate").clone();
                        element.removeClass("template");
                        element.attr("id","Row"+i);
                        element.html(element.html().split("{{id}}").join(routerPolicy.data[i].id));
                        element.html(element.html().split("{{name}}").join(routerPolicy.data[i].name));
                        element.html(element.html().split("{{isVerified}}").join(routerPolicy.data[i].isVerified));
                        element.html(element.html().split("{{isOnline}}").join(routerPolicy.data[i].isOnline));
                        element.html(element.html().split("{{createdAt}}").join(moment(routerPolicy.data[i].createdAt).fromNow()));
                        $(".rows").append(element);
                    }
                    page.pageLoaded();     
                    $(".data").show();
                    $(".nodata").hide();       
                } else {
                    $(".data").hide();
                    $(".nodata").show();
                }       
            },
            pageLoaded: function() {
                $(".gridAction").click(page.gridAction);
                $(".navigate").off("click");
                $(".navigate").addClass("disabled");
                $(".clickEdit").click(page.clickEdit);
                if (!routerPolicy.isFirst()) {
                    $(".navigate.prev").removeClass("disabled");
                    $(".navigate.prev").on("click", routerPolicy.prev);
                }
                if (!routerPolicy.isLast()) {
                    $(".navigate.next").removeClass("disabled");
                    $(".navigate.next").on("click", routerPolicy.next);
                } 
                app.postLoad();
            },
            gridAction: function(e) {
                var action = $(e.currentTarget).data("action");
                var id = $(e.currentTarget).data("id");
                if (action=="delete") {
                    page.deleting = [];
                    page.deleting[page.deleting.length] = id;
                    modal.confirm("you want to delete this "+page.singular, page.confirmedDelete);
                } else if (action=="edit") {
                    page.edit(id);
                }
            },
            edit: function(id) {
                page.reset();
                var detail = routerPolicy.details(id);
                $(".adding").hide();
                $(".editing").show();

                tags.reset(page.tagData,detail);
                tags.extended(detail, $("#TagExtended"));
                $("#Name").val(detail.name);
                $("#Roles").val(detail.edgeRouterRoles);
                $("#IDRoles").val(detail.identityRoles);

                page.editId = id;
                modal.show("AddModal");
            },
            save: function() {
                if (page.validate()) {
                    if (localStorage.getItem("filterAfterSave")=="on") {
                        $("#SearchFilter").val($("#Name").val());
                        routerPolicy.filter = $("#SearchFilter").val();
                    }
                    var roles = page.getRoles($("#Roles").val().trim().split(','));
                    var idRoles = page.getRoles($("#IDRoles").val().trim().split(','));
                    routerPolicy.save(
                        $("#Name").val(),
                        roles,
                        idRoles,
                        tags.getValues(page.tagData),
                        page.editId);
                } else growler.form();
            },
            getRoles: function(roles) {
                var values = [];
                for (var i=0; i<roles.length; i++) {
                    var item = roles[i].trim();
                    if (item.length>0) values[values.length] = item;
                }
                return values;
            },
            deleteMulti: function(e) {
                page.deleting = [];
                $(".selector.selected").each(function(index, e) {
                    page.deleting[page.deleting.length] = $(e).data("id");
                });
                if (page.deleting.length>0) {
                    modal.confirm("you want to delete these "+page.deleting.length+" "+((page.deleting.length>1)?page.binding.pageTitle:page.binding.singular), page.confirmedDelete);
                }
            },
            confirmedDelete: function() {
                routerPolicy.delete(page.deleting);
                app.reset();
            },
            validate: function() {
                $(".errors").removeClass("errors");
                if ($("#Name").val().trim().length==0) $("#Name").addClass("errors");
                return $(".errors").length==0;
            },
            reset: function() {
                $("#TagExtended").html("");
                tags.reset(page.tagData);
                page.editId = "";
                page.removal = {};
                $("#Name").val("");
                $("#Roles").val("");
                $("#IDRoles").val("");
            },
            handleAction: function(e) {
                page.reset();
                var action = $(e.currentTarget).data("action");
                if (action=="add") {
                    page.add();
                } else if (action=="remove") {
                    page.deleteMulti();
                }
            },
            add: function() {
                $(".adding").show();
                $(".editing").hide();
                modal.show("AddModal");
            }
        }
    </script>